I"z3<h1 id="webxml이란">web.xml이란?</h1>
<p>웹 어플리케이션을 구성하는 웹 컴포넌트에 대한 구성 및 배치 정보를 제공하며, 웹 어플리케이션의 배포서술자(Deployment Descriptor;DD)역할을 하는 XML형식의 파일이다.<br />
웹 어플리케이션에서 서블릿 클래스를 사용하려면, 설치 뿐만 아니라, 웹프로젝트 상에서 등록하는 과정이 필요한데, 서블릿 클래스를 등록하는 곳을 배포서술자(Deployment Descriptor;DD)라고 하며, 이 역할을 web.xml 파일이 한다.</p>
<ul>
  <li>서블릿(Servlet)
    <ul>
      <li>클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술</li>
      <li>쉽게 설명하면 클라이언트가 어떠한 요청을 하면 그에 대한 결과를 다시 전송해주어야 하는데, 이러한 역할을 하는 자바 프로그램</li>
    </ul>
  </li>
</ul>

<h1 id="배포서술자를-사용하는-이유">배포서술자를 사용하는 이유</h1>
<ol>
  <li>컨테이너 호환성 유지
    <ul>
      <li>웹 어플리케이션의 배포와 관련된 정보를 제공함으로써 서로 다른 컨테이너에서도 별도의 설정 없이 동일한 어플리케이션 운영 가능</li>
    </ul>
  </li>
  <li>효율적인 어플리케이션 유지보수
    <ul>
      <li>특정 서블릿 혹은 전체 어플리케이션에서 공유하기 위한 초기화 파라미터의 설정이 가능하므로, 어플리케이션 프로그램 간 데이터 공유가 용이</li>
    </ul>
  </li>
  <li>유연한 어플리케이션 운영
    <ul>
      <li>서블릿 매핑 등 다양한 정보를 텍스트 기반으로 설정할 수 있으므로, 서비스 운영 중 프로그램을 수정하지 않고도 어플리케이션 동작 등에 대한 조정이 가능하다</li>
    </ul>
  </li>
</ol>

<h1 id="webxml-구성요소">web.xml 구성요소</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;web-app&gt;</code>
    <ul>
      <li>web.xml의 Root-Element 기능을 담당한다.
        <ul>
          <li>xmlns와 servlet의 버전을 설정</li>
        </ul>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://java.sun.com/xml/ns/javaee"</span> 
          <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
          <span class="na">xsi:schemaLocation=</span><span class="s">"http://java.sun.com/xml/ns/javaee 
                              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>
          <span class="na">version=</span><span class="s">"3.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/web-app&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;display-name&gt;</code>
    <ul>
      <li>web.xml(DD) 파일의 title을 설정하는 부분.</li>
      <li>
        <p>기본적으로 프로젝트 명으로 설정된다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;display-name&gt;</span>project-name<span class="nt">&lt;/display-name&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;welcome-file-list&gt;</code>
    <ul>
      <li>서버로 요청이 들어왓을 때 표시할 welcome-file을 순서대로 정의하는 부분
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;welcome-file&gt;</code> : 적용할 welcome-file의 이름</li>
        </ul>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  // index.jsp, index.html의 순서로 호출하고, 없다면 404 페이지를 호출한다.
  <span class="nt">&lt;welcome-file-list&gt;</span>
      <span class="nt">&lt;welcome-file&gt;</span>index.jsp<span class="nt">&lt;/welcome-file&gt;</span>
      <span class="nt">&lt;welcome-file&gt;</span>index.html<span class="nt">&lt;/welcome-file&gt;</span>
  <span class="nt">&lt;/welcome-file-list&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;error-page&gt;</code>
    <ul>
      <li>error code 혹은 exception type을 error page로 매핑하기 위한 부분
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;error-code&gt;</code> : 웹의 에러 코드를 적어두는 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;exception-type&gt;</code> : java exception type을 적어주는 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;location&gt;</code>: 매핑할 페이지의 경로를 적는 변수</li>
        </ul>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;error-page&gt;</span>
      <span class="nt">&lt;error-code&gt;</span>404<span class="nt">&lt;/error-code&gt;</span>
      <span class="nt">&lt;location&gt;</span>/error_page/404.jsp<span class="nt">&lt;/location&gt;</span>
  <span class="nt">&lt;/error-page&gt;</span>
  <span class="nt">&lt;error-page&gt;</span>
      <span class="nt">&lt;exception-type&gt;</span>java.lang.NullPointerException<span class="nt">&lt;/exception-type&gt;</span>
      <span class="nt">&lt;location&gt;</span>/error_page/404.jsp<span class="nt">&lt;/location&gt;</span>
  <span class="nt">&lt;/error-page&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;context-param&gt;</code>
    <ul>
      <li>Servlet context의 parameter를 선언해주는 부분.</li>
      <li>web.xml의 전역변수 같은 느낌이다.</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;init-param&gt;</code>은 지역변수라고 생각하면 이해가 쉽다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;param-name&gt;</code> : context parameter의 이름</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;param-value&gt;</code> : context parameter의 값</li>
        </ul>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  // 대표적으로 spring context 변수를 선언하는 예시
  <span class="nt">&lt;context-param&gt;</span>
      <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
      <span class="nt">&lt;param-value&gt;</span>/WEB-INF/conf/spring-context.xml<span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/context-param&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;listener&gt;</code>
    <ul>
      <li>Application Listener Bean을 가리키기 위한 부분.</li>
      <li>해당 Bean은 웹 어플리케이션에 등록되어 있어야 한다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;listener-class&gt;</code> : listener bean의 class를 지정해주는 부분.</li>
        </ul>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  // spring에서 contextConfigLocation을 설정하기 위한 listener bean 지정
  <span class="nt">&lt;listener&gt;</span>
      <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
  <span class="nt">&lt;/listener&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;filter&gt;</code>
    <ul>
      <li>웹 어플리케이션에서 사용하는 filter를 선언하는 부분.</li>
      <li>어떤 filter를 사용할 것인지 설정하는 부분으로, 대표적으로 encodingFilter가 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;filter-name&gt;</code> : Required, unique, filter-mapping Element와 매핑하기 위한 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;filter-class&gt;</code> : 사용할 클래스의 정규화 된 이름을 나타내는 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;init-param&gt;</code> : filter에서 사용할 name-value 쌍을 선언하는 부분</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;async-supported&gt;</code> : Optional, 선언된 경우 async 방식으로 사용이 가능
  ~~~~xml
  // Encoding 방식을 UTF-8로 하기 위한 Filter</li>
        </ul>
        <filter>
      <filter-name>encodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
          <param-name>encoding</param-name>
          <param-value>UTF-8</param-value>
      </init-param>
  </filter>
        <p>~~~~</p>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;filter-mapping&gt;</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&lt;filter&gt;</code>가 어떤 filter를 사용할지 설정하는 것이라면, <code class="language-plaintext highlighter-rouge">&lt;filter-mapping&gt;</code>은 설정한 filter를 어디에 적용할 것인지를 URL 또는 Servlet을 통해 선언하는 부분이다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;filter-name&gt;</code> : filter Element와 매핑하기 위한 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;url-pattern&gt;</code> : filter를 적용할 url을 선언하는 부분</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;servlet-name&gt;</code> : filter를 적용할 servlet을 선언하는 부분
  ~~~~xml
  // root 이하 모든 url에 이름이 encodingFilter인 filter를 적용</li>
        </ul>
        <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>
        <p>~~~~</p>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;servlet&gt;</code>
    <ul>
      <li>Servlet을 선언할 때 사용하는 element. 선언에 필요한 정보를 담고 있다.</li>
      <li>Spring에서는 <strong>DispatcherServlet</strong>을 선언할 때 자주 볼 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;servlet-name&gt;</code> : Required, unique, 사용할 servlet의 이름을 지정</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;servlet-class&gt;</code> : 사용할 클래스의 정규화 된 이름을 나타내는 변수</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;init-param&gt;</code> : servlet에서 사용할 name-value 쌍을 선언하는 부분</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;load-on-startup&gt;</code> : servlet이 배치될 때의 우선순위를 지정하기 위한 부분
  ~~~~xml
  // 대표적인 DispatcherServlet을 선언하는 예시</li>
        </ul>
        <servlet>
      <servlet-name>dispatcherServlet</servlet-name>
      <servler-class>org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
      <init-param>
          <param-name>contextConfigLocation</param-name>
          <param-value>/WEB-INF/spring-servlet.xml</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
  &lt;/servlet&gt;
  ~~~~
</servler-class></servlet>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;servlet-mapping&gt;</code>
    <ul>
      <li>Servlet과 URL 사이의 매핑을 정의하는 부분
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;servlet-name&gt;</code> : 매핑할 servlet-name을 선언하는 부분</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;url-pattern&gt;</code> : servlet과 매핑할 URL 패턴을 선언하는 부분
  ~~~~xml
  // .viii로 끝나는 모든 URL에 dispatcherServlet을 매핑</li>
        </ul>
        <servlet-mapping>
      <servlet-name>dispatcherServlet</servlet-name>
      <url-pattern>*.viii</url-pattern>
  </servlet-mapping>
        <p>~~~~</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="reference">Reference</h1>
<blockquote>
  <ul>
    <li><a href="https://mangkyu.tistory.com/14">[JSP] 서블릿(Servlet)이란?</a></li>
    <li><a href="https://wanna-b.tistory.com/87">web.xml 파일과 배포서술자(Deployment Descritor)</a></li>
    <li><a href="https://jayviii.tistory.com/7">개발 환경 구축하기 첫 번째, web.xml</a></li>
  </ul>
</blockquote>
:ET